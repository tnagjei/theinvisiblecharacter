name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - development
      dry-run:
        description: 'Dry run (no actual deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOMAIN: 'theinvisiblecharacter.live'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        pip install html5validator
        
    - name: Run HTML validation
      run: |
        html5validator --root . --match "*.html"
        
    - name: Run link check
      run: |
        npm install -g linkinator
        linkinator . --recurse --skip "^(http|mailto)"
        
    - name: Run performance tests
      run: |
        chmod +x test-performance.sh
        ./test-performance.sh
        
    - name: Run custom tests
      run: |
        chmod +x run-tests.js
        node run-tests.js

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Build for production
      if: github.ref == 'refs/heads/main'
      run: |
        chmod +x build.sh
        ./build.sh --production --clean
        
    - name: Build for development
      if: github.ref == 'refs/heads/develop'
      run: |
        chmod +x build.sh
        ./build.sh --development --clean
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: build/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
        
    - name: Check for vulnerabilities
      run: |
        npm audit --audit-level moderate
        if command -v npm audit &> /dev/null; then
          npm audit --audit-level moderate
        fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: build/
        
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: 'theinvisiblecharacter-live'
        directory: 'build'
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        branch: main
        
    - name: Deploy to custom domain
      run: |
        echo "Deploying to custom domain: ${{ env.DOMAIN }}"
        # Add custom domain deployment logic here
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        sleep 30  # Wait for deployment to propagate
        curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }} | grep -q "200\|301\|302"
        
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Deployment to production completed successfully!"
        echo "üåê Site is available at: https://${{ env.DOMAIN }}"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment to production failed!"
        echo "üîç Check the logs for details"

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name != 'pull_request'
    environment: development
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: build/
        
    - name: Deploy to Cloudflare Pages (Development)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: 'theinvisiblecharacter-live-dev'
        directory: 'build'
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        branch: develop
        
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Development deployment completed successfully!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Development deployment failed!"

  manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-output
        path: build/
        
    - name: Set environment
      id: env
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "project_name=theinvisiblecharacter-live" >> $GITHUB_OUTPUT
          echo "environment_name=production" >> $GITHUB_OUTPUT
        else
          echo "project_name=theinvisiblecharacter-live-dev" >> $GITHUB_OUTPUT
          echo "environment_name=development" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to Cloudflare Pages
      if: ${{ github.event.inputs.dry-run == 'false' }}
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ steps.env.outputs.project_name }}
        directory: 'build'
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref_name }}
        
    - name: Dry run notification
      if: ${{ github.event.inputs.dry-run == 'true' }}
      run: |
        echo "üîç This was a dry run. No actual deployment was performed."
        echo "üì¶ Build artifacts are ready for deployment."
        
    - name: Notify on success
      if: success() && github.event.inputs.dry-run == 'false'
      run: |
        echo "‚úÖ Manual deployment to ${{ steps.env.outputs.environment_name }} completed successfully!"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Manual deployment failed!"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Monitor performance
      run: |
        echo "üìä Monitoring performance metrics..."
        echo "This would integrate with Lighthouse CI, Web Vitals monitoring, etc."
        
    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # Add performance reporting logic here

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-development, manual-deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Send success notification
      if: needs.deploy-production.result == 'success' || needs.deploy-development.result == 'success' || needs.manual-deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: 'üöÄ Deployment completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send failure notification
      if: needs.deploy-production.result == 'failure' || needs.deploy-development.result == 'failure' || needs.manual-deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: '‚ùå Deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}